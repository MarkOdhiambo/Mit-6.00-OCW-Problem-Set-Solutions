Problem 4:
	Write a function, called subStringMatchExactlyOneSub which takes two arguments: a target string and a key string. This function should return a tuple of all starting points of matches of the key to the target, such that at exactly one element of the key is incorrectly matched to the target. Complete the definition

	Prepare an example key and target and the expected results.

		target1 = 'atgacatgcacaagtatgcat'
		#          01234567890123456789
		key12 = 'atgc'
		# perfect matches in target1 at (5, 15)
		# variations	_tgc, a_gc, at_c, atg_
		#	_tgc matches at (5, 15)
		#	a_gc matches at (5, 15)
		#	at_c matches at (5, 15)
		#	atg_ matches at (0, 5, 15)
		#
		#	subStringMatchExactlyOneSub(target1,key12) = (0)
		

	Use the provided function to get all matches, then check each match to see if it is a perfect match. If the match is perfect remove it from the answer. Iterate though the list removing perfect matches then return parses list.		




def subStringMatchExactlyOneSub(target,key):
	"""This function takes two arguments: a target string and a key string. This function should return a tuple of all starting points of matches of the key to the target, such that exactly one element of the key is incorrectly matched to the target."""
	
****	Functions from prob 3	****

def subStringMatchExact (target, key):
	"""This function returns a tuple of the starting position(s) of a key string within a target string"""






def constrainedMatchPair(firstMatch,secondMatch,length):
	"""This function takes three arguments: a tuple representing starting points for the first substring, a tuple representing starting points for the second substring, and the length of the first substring. The function should return a tuple of all members (call it n) of the first tuple for which there is an element in the second tuple (call it k) such that n+m+1 = k, where m is the length of the first substring."""







def subStringMatchOneSub(key,target):
    """search for all locations of key in target, with one substitution"""



